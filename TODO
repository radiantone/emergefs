- emerge cat /queries/query1.results
    - Be able to cat subobjects and collections

-------------
- Create/Store open transaction on server, for client to add various operations to, then commit as a whole
    - e.g. open transaction by name, then call mathods or set properties on multiple objects, then commit
    - if an error occurs at any step, all previous steps are rolled back automatically
- RESTServer and RESTClients
- Various FileSystem Implementations (SQL, S3, Dynamo, etc)
- Research ways to avoid dilling objects to/farm Z0DB, since it only supports pickle and can't serialize some classes/objects
- Workflows and pipelines

-------------
- Add different RPC implementations e.g. HTTP (in addition to 0MQ/ZRPC) so it can run in a browser (clients)
- Be able to combine objects into new mixed-in objects
    - For example:  $ emerge mixin /path/object1 /path/object2 /path/mixedobject
    - The state from each source object and its methods are carried over into the new object, leaving the originals in tact
- Stress, performance tests
- pytests
- docs
- Be able to compose objects. In addition to directories and subdirectories of objects, it would be cool to compose
  objects. For example, let's say you have a Customer object and many Account objects in separate directories as
  separate classes. The Account object contains a field for the uuid of the Customer object.
  Instead, we might want to do something like this:

  $ emerge add /path/customer1 "accounts" /path/account1 /path/account2

  Which adds account1 and account2 as children to customer1. In such a way, that when you retrieve customer1
  and iterate over its "accounts" property, you get the list of accounts.

  Doing this on-the-fly without having to hard code the object relations would be awesome.